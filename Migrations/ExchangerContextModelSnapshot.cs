// <auto-generated />
using System;
using CurrencyExchange.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CurrencyExchange.Migrations
{
    [DbContext(typeof(ExchangerContext))]
    partial class ExchangerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CurrencyExchange.DTO.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("CurrencyExchange.DTO.DailyRate", b =>
                {
                    b.Property<int>("DailyRateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.HasKey("DailyRateId");

                    b.ToTable("DailyRate");
                });

            modelBuilder.Entity("CurrencyExchange.Models.Composite", b =>
                {
                    b.Property<int>("CurrencyId");

                    b.Property<int>("DailyRateId");

                    b.Property<double>("Rate");

                    b.HasKey("CurrencyId", "DailyRateId");

                    b.HasIndex("DailyRateId");

                    b.ToTable("Composite");
                });

            modelBuilder.Entity("CurrencyExchange.Models.Composite", b =>
                {
                    b.HasOne("CurrencyExchange.DTO.Currency", "Currency")
                        .WithMany("DailyRates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CurrencyExchange.DTO.DailyRate", "DailyRate")
                        .WithMany("Currencies")
                        .HasForeignKey("DailyRateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
